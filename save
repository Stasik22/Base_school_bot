def notes_load():
    try:
        with open(NOTES_FILE, "r", encoding= "utf-8") as file:
            return json.load(file)
    except(FileNotFoundError, json.JSONDecodeError):
        return {}


def notes_save(notes):
    with open(NOTES_FILE, "w", encoding="utf-8") as file:
        json.dump(notes,file, indent=4, ensure_ascii=False)

notes_data = notes_load()


@bot.message_handler(commands=["–ù–æ—Ç–∞—Ç–∫–∏"])
def notes(message):
    chat_id = str(message.chat.id)
    user_notes = notes_data.get(chat_id, [])

    if isinstance(user_notes, list):
        notes_text = "\n".join(f"{i + 1}. {note.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–æ—Ç–∞—Ç–∫–∞')} (üìÖ {note.get('date', '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞')})" for i, note in enumerate(user_notes) if isinstance(note, dict))
        bot.send_message(chat_id, f"f<b>–í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏</b>\n{notes_text}" if notes_text else "<b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫</b>", parse_mode="html" ,reply_markup=notes_button())
    else:
        bot.send_message(chat_id, "<b>–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ—Ç–∞—Ç–æ–∫</b>", parse_mode="html", reply_markup=notes_button())


@bot.message_handler(commands=["–°—Ç–≤–æ—Ä–∏—Ç–∏"])
def create_note(message):
    bot.send_message(message.chat.id, "<b>–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –Ω–æ—Ç–∞—Ç–∫—É:</b>", parse_mode="html")
    bot.register_next_step_handler(message, save_note)


def save_note(message):
    chat_id = str(message.chat.id)
    note_text = message.text.strip()

    if note_text:
        note_entry = {"text": note_text, "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
        notes_data.setdefault(chat_id, []).append(note_entry)
        notes_save(notes_data)
        bot.send_message(chat_id, "‚úÖ –ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", parse_mode="html", reply_markup=notes_button())
    else:
        bot.send_message(chat_id, "‚ùå –ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!", parse_mode="html")


@bot.message_handler(commands=["–û—á–∏—Å—Ç–∏—Ç–∏"])
def clear_notes(message):
    chat_id = str(message.chat.id)
    if chat_id in notes_data:
        del notes_data[chat_id]
        notes_save(notes_data)
        bot.send_message(chat_id, "üóëÔ∏è<b>–ù–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫,–æ—Å–∫—ñ–ª—å–∫–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ</b>",parse_mode="html", reply_markup=notes_button())
    else:
        bot.send_message(chat_id, "‚ùó<b>–£Ô∏è –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>", parse_mode="html")
    pass



@bot.message_handler(commands=["–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å"])
def view_notes(message):
    chat_id = str(message.chat.id)
    user_notes = notes_data.get(chat_id, [])

    if isinstance(user_notes, list):
        notes_text = "\n".join(f"{i + 1}. {note.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–æ—Ç–∞—Ç–∫–∞')} (üìÖ {note.get('date', '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞')})" for i, note in enumerate(user_notes) if isinstance(note, dict))
        bot.send_message(chat_id, f"<b>–í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏:</b>\n{notes_text}" if notes_text else "<b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.</b>",parse_mode="html")
    else:
        bot.send_message(chat_id,"<b>‚ÄΩ–ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ—Ç–∞—Ç–æ–∫</b>", parse_mode="html")
    pass
